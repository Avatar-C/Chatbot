# -*- coding: utf-8 -*-
"""Transformer Training (Efficient MAIN).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MEhW2yl5I4xByybYsFop-y_O03bUWJ5x
"""

import torch
import torch.nn as nn
import torch.optim as optim
import numpy as np
import torch.nn.functional as F

class PositionalEncoding(nn.Module):
    def __init__(self, d_model, max_len=5000):
        super(PositionalEncoding, self).__init__()
        pe = torch.zeros(max_len, d_model)
        position = torch.arange(0, max_len).unsqueeze(1).float()
        div_term = torch.exp(torch.arange(0, d_model, 2).float() * -(np.log(10000.0) / d_model))
        pe[:, 0::2] = torch.sin(position * div_term)
        pe[:, 1::2] = torch.cos(position * div_term)
        pe = pe.unsqueeze(0)
        self.register_buffer('pe', pe)

    def forward(self, x):
        return x + self.pe[:, :x.size(1)]

class MultiHeadAttention(nn.Module):
    def __init__(self, d_model, num_heads):
        super(MultiHeadAttention, self).__init__()
        self.d_model = d_model
        self.num_heads = num_heads
        self.depth = d_model // num_heads

        self.query = nn.Linear(d_model, d_model)
        self.key = nn.Linear(d_model, d_model)
        self.value = nn.Linear(d_model, d_model)

        self.dense = nn.Linear(d_model, d_model)

    def split_heads(self, x, batch_size):
        x = x.view(batch_size, -1, self.num_heads, self.depth)
        return x.permute(0, 2, 1, 3)

    def forward(self, query, key, value, mask=None):
        batch_size = query.size(0)

        query = self.split_heads(self.query(query), batch_size)
        key = self.split_heads(self.key(key), batch_size)
        value = self.split_heads(self.value(value), batch_size)

        scores = torch.matmul(query, key.transpose(-2, -1)) / np.sqrt(self.depth)
        if mask is not None:
            scores += (mask * -1e9)

        attention = torch.softmax(scores, dim=-1)
        output = torch.matmul(attention, value)

        output = output.permute(0, 2, 1, 3).contiguous().view(batch_size, -1, self.d_model)
        output = self.dense(output)

        return output

class PositionwiseFeedforward(nn.Module):
    def __init__(self, d_model, d_ff, dropout=0.1):
        super(PositionwiseFeedforward, self).__init__()
        self.linear1 = nn.Linear(d_model, d_ff)
        self.dropout = nn.Dropout(dropout)
        self.linear2 = nn.Linear(d_ff, d_model)

    def forward(self, x):
        return self.linear2(self.dropout(torch.relu(self.linear1(x))))

class EncoderLayer(nn.Module):
    def __init__(self, d_model, num_heads, d_ff, dropout=0.1):
        super(EncoderLayer, self).__init__()
        self.attn = MultiHeadAttention(d_model, num_heads)
        self.ff = PositionwiseFeedforward(d_model, d_ff, dropout)
        self.norm1 = nn.LayerNorm(d_model)
        self.norm2 = nn.LayerNorm(d_model)
        self.dropout1 = nn.Dropout(dropout)
        self.dropout2 = nn.Dropout(dropout)

    def forward(self, x, mask):
        attn_output = self.attn(x, x, x, mask)
        x = self.norm1(x + self.dropout1(attn_output))
        ff_output = self.ff(x)
        x = self.norm2(x + self.dropout2(ff_output))
        return x

class DecoderLayer(nn.Module):
    def __init__(self, d_model, num_heads, d_ff, dropout=0.1):
        super(DecoderLayer, self).__init__()
        self.attn1 = MultiHeadAttention(d_model, num_heads)
        self.attn2 = MultiHeadAttention(d_model, num_heads)
        self.ff = PositionwiseFeedforward(d_model, d_ff, dropout)
        self.norm1 = nn.LayerNorm(d_model)
        self.norm2 = nn.LayerNorm(d_model)
        self.norm3 = nn.LayerNorm(d_model)
        self.dropout1 = nn.Dropout(dropout)
        self.dropout2 = nn.Dropout(dropout)
        self.dropout3 = nn.Dropout(dropout)

    def forward(self, x, enc_output, look_ahead_mask, padding_mask):
        attn_output1 = self.attn1(x, x, x, look_ahead_mask)
        x = self.norm1(x + self.dropout1(attn_output1))
        attn_output2 = self.attn2(x, enc_output, enc_output, padding_mask)
        x = self.norm2(x + self.dropout2(attn_output2))
        ff_output = self.ff(x)
        x = self.norm3(x + self.dropout3(ff_output))
        return x

class Transformer(nn.Module):
    def __init__(self, vocab_size, d_model, num_heads, num_layers, d_ff, dropout=0.1):
        super(Transformer, self).__init__()
        self.encoder = EncoderLayer(d_model, num_heads, d_ff, dropout)
        self.decoder = DecoderLayer(d_model, num_heads, d_ff, dropout)
        self.embedding = nn.Embedding(vocab_size, d_model)
        self.positional_encoding = PositionalEncoding(d_model)
        self.fc_out = nn.Linear(d_model, vocab_size)
        self.num_layers = num_layers

    def forward(self, src, tgt, src_mask, tgt_mask):
        src = self.embedding(src)
        tgt = self.embedding(tgt)
        src = self.positional_encoding(src)
        tgt = self.positional_encoding(tgt)

        for _ in range(self.num_layers):
            src = self.encoder(src, src_mask)
            tgt = self.decoder(tgt, src, tgt_mask, src_mask)

        output = self.fc_out(tgt)
        return output
"""
vocab = {
    "<start>": 0, "<end>": 1, "hi": 2, "hello": 3, "how": 4, "are": 5, "you?": 6,
    "I'm": 7, "good": 8, "about": 9, "what's": 10, "your": 11, "name?": 12,
    "tell": 13, "me": 14, "a": 15, "joke": 16, "morning": 17, "night": 18,
    "weather?": 19, "from?": 20, "time?": 21, "can": 22, "help": 23, "me?": 24,
    "ChatGPT.": 25, "is": 26, "the": 27, "weather": 28, "it's": 29, "sunny": 30,
    "today.": 31, "where": 32, "from": 33, "internet.": 34, "what": 35, "time": 36,
    "it?": 37, "I": 38, "don't": 39, "know,": 40, "but": 41, "always": 42, "to": 43,
    "chat!": 44, "assist": 45, "why": 46, "skeletons": 47, "fight": 48, "each": 49,
    "other?": 50, "they": 51, "have": 52, "guts.": 53, "morning!": 54, "night!": 55, "of": 56, "course!": 57
}

"""
# Input-output pairs (with simplified vocabulary)
input_output_pairs = [

    ("tell me a joke", "Why don't skeletons fight each other? They don't have the guts."),
    ("hi", "hello"),
    ("how are you?", "I'm good, how about you?"),
    ("what's your name?", "I'm Iris."),
    ("good morning", "Good morning!"),
    ("good night", "Good night!"),
    ("how is the weather?", "It's sunny today."),
    ("where are you from?", "I'm from the internet."),
    ("what time is it?", "I don't know, but it's always time to chat!"),
    ("can you help me?", "Of course! How can I assist you?"),

    ("do you like music?", "Yes! Anime openings are especially fun."),
    ("can you sing?", "I can't, but I can share anime opening lyrics!"),
    ("who is your favorite anime waifu?", "I think Rem from 'Re:Zero' is quite popular."),
    ("who is the best anime husbando?", "Levi Ackerman from 'Attack on Titan' is a fan favorite!"),
    ("what's the most overrated anime?", "Some say 'Sword Art Online', but it still has a huge fanbase!"),
    ("what's the most underrated anime?", "'Steins;Gate' is a masterpiece but not talked about enough."),
    ("do you know any anime memes?", "Yes! 'Omae wa mou shindeiru' - NANI?!"),
    ("what's the best sports anime?", "'Haikyuu!!' and 'Kuroko no Basket' are top-tier."),
    ("is Pokémon an anime?", "Yes! It's one of the most famous anime worldwide."),
    ("who is Ash's strongest Pokémon?", "Pikachu is iconic, but Greninja was super strong."),

    ("what's your favorite anime?", "I like many, but 'Attack on Titan' is pretty intense!"),
    ("who is the strongest anime character?", "That's debatable, but Goku and Saitama are top contenders!"),
    ("do you watch anime?", "I don’t watch, but I know a lot about anime!"),
    ("who is your favorite anime protagonist?", "I think Luffy from One Piece is pretty inspiring!"),
    ("recommend me an anime", "If you like action, try 'Demon Slayer'. If you like mystery, try 'Death Note'."),
    ("who would win, Naruto or Luffy?", "That’s a tough one! Naruto has chakra and jutsu, but Luffy has insane durability."),
    ("is Attack on Titan over?", "Yes, the final season has concluded!"),
    ("what's the saddest anime?", "'Your Lie in April' and 'Clannad: After Story' will make you cry."),
    ("who is the best anime villain?", "Johan Liebert from 'Monster' is one of the most chilling villains ever."),
    ("what is the best anime fight scene?", "Naruto vs. Sasuke (final battle) is legendary!"),

    # Anime-related dialogues
    ("what's your favorite anime?", "I like many, but 'Attack on Titan' is pretty intense!"),
    ("who is the strongest anime character?", "That's debatable, but Goku and Saitama are top contenders!"),
    ("do you watch anime?", "I don’t watch, but I know a lot about anime!"),
    ("who is your favorite anime protagonist?", "I think Luffy from One Piece is pretty inspiring!"),
    ("recommend me an anime", "If you like action, try 'Demon Slayer'. If you like mystery, try 'Death Note'."),
    ("who would win, Naruto or Luffy?", "That’s a tough one! Naruto has chakra and jutsu, but Luffy has insane durability."),
    ("is Attack on Titan over?", "Yes, the final season has concluded!"),
    ("what's the saddest anime?", "'Your Lie in April' and 'Clannad: After Story' will make you cry."),
    ("who is the best anime villain?", "Johan Liebert from 'Monster' is one of the most chilling villains ever."),
    ("what is the best anime fight scene?", "Naruto vs. Sasuke (final battle) is legendary!"),



    # More casual anime discussions
    ("should I watch One Piece?", "Absolutely! It’s long, but worth it."),
    ("what's the best Studio Ghibli movie?", "'Spirited Away' is a must-watch!"),
    ("who is the smartest anime character?", "Light Yagami from 'Death Note' is a genius."),
    ("who has the best character development?", "Zuko from 'Avatar: The Last Airbender' is amazing, even if it's not anime."),
    ("what's a good romance anime?", "'Toradora!' and 'Kaguya-sama: Love is War' are great choices."),
    ("what anime has the best animation?", "'Demon Slayer' has stunning animation!"),
    ("what is the best anime opening?", "'Unravel' from Tokyo Ghoul is legendary."),
    ("who is the most overpowered anime character?", "Anos Voldigoad from 'The Misfit of Demon King Academy' is ridiculously strong."),
    ("do you know JoJo's Bizarre Adventure?", "Yes! 'ORA ORA ORA!' and 'ZA WARUDO!' are iconic."),
    ("can you do a Kamehameha?", "I wish! But Goku does it best."),

    # More engaging fun topics
    ("what's the best anime for beginners?", "'Fullmetal Alchemist: Brotherhood' is a great start!"),
    ("what's the scariest anime?", "'Another' and 'Higurashi' are quite terrifying."),
    ("who is the best anime swordsman?", "Many say Zoro from One Piece or Guts from Berserk."),
    ("who has the saddest backstory in anime?", "Nagato (Pain) from Naruto had a tragic past."),
    ("is Dragon Ball better than Naruto?", "Both are legendary, but it depends on your taste!"),
    ("what's your favorite anime ship?", "Holo and Lawrence from 'Spice and Wolf' have a great dynamic."),
    ("what's the longest anime?", "'One Piece' is still ongoing with over 1000 episodes!"),
    ("which anime has the best world-building?", "'Attack on Titan' and 'Made in Abyss' do world-building incredibly well."),
    ("who is the most relatable anime character?", "Hachiman from 'Oregairu' is pretty relatable for introverts."),
    ("can you recommend a fantasy anime?", "'Re:Zero' and 'Made in Abyss' are great fantasy anime!"),
    ("do you know any anime trivia?", "Did you know? Luffy was originally supposed to use weapons!"),
    ("who is the best anime teacher?", "Koro-sensei from 'Assassination Classroom' is an amazing teacher."),
    ("what's your favorite anime quote?", "'A lesson without pain is meaningless.' - Edward Elric."),
    ("do you think anime is for kids?", "Not all! Some anime like 'Berserk' and 'Tokyo Ghoul' are quite dark."),
    ("what's the best mecha anime?", "'Neon Genesis Evangelion' is a must-watch for mecha fans."),
    ("do you like isekai anime?", "Yes! 'That Time I Got Reincarnated as a Slime' is fun."),
    ("what's the best anime about friendship?", "'One Piece' and 'Hunter x Hunter' showcase amazing friendships."),


    # General interactions
    ("Can you tell me a joke?", "Why did the scarecrow win an award? Because he was outstanding in his field!"),
    ("Hey there!", "Hello! How’s your day going?"),
    ("How have you been?", "I've been great! What about you?"),
    ("Remind me of your name.", "I'm Iris, your friendly AI."),
    ("Morning!", "Good morning! Hope you have an amazing day."),
    ("Good night, see you tomorrow.", "Good night! Rest well."),
    ("How’s the weather looking?", "It’s looking pretty nice today!"),
    ("Where do you actually live?", "I exist in the digital realm, always here for you."),
    ("Do you know what time it is right now?", "I don’t keep track of time, but it’s always a great time to chat!"),
    ("Can you give me some advice?", "Of course! What’s on your mind?"),

    # Music-related topics
    ("What kind of music do you like?", "I enjoy all sorts, but anime openings are really exciting!"),
    ("Can you recommend a song?", "Sure! Try 'Gurenge' from Demon Slayer."),
    ("Which anime has the best soundtrack?", "'Attack on Titan' and 'Made in Abyss' have incredible scores."),
    ("Can you beatbox?", "I wish! But I can appreciate a good rhythm."),
    ("Who is the best anime composer?", "Yoko Kanno and Hiroyuki Sawano are legendary!"),

    # Anime & Manga discussions
    ("Tell me about a cool anime character.", "Gojo Satoru from 'Jujutsu Kaisen' is insanely strong!"),
    ("What's an anime that everyone should watch?", "'Fullmetal Alchemist: Brotherhood' is a masterpiece."),
    ("What’s the funniest anime?", "'Gintama' will make you laugh non-stop."),
    ("Who is the most tragic anime character?", "Griffith from 'Berserk' has a wild story."),
    ("Which anime has the best villains?", "'Death Note' and 'Code Geass' have brilliant antagonists."),
    ("What’s the most wholesome anime?", "'My Love Story!!' and 'Barakamon' are pure joy."),
    ("What anime has the best character relationships?", "'March Comes in Like a Lion' explores deep bonds."),
    ("What's a mind-blowing anime?", "'Steins;Gate' will mess with your mind in the best way."),
    ("Which anime is criminally underrated?", "'Erased' and 'Vinland Saga' deserve more attention."),
    ("What’s a classic old-school anime I should watch?", "'Cowboy Bebop' is an absolute classic."),
    ("Is 'One Punch Man' overrated?", "No way! It’s a great mix of comedy and action."),
    ("What's the most intense anime battle?", "'Levi vs. Beast Titan' is pure adrenaline."),
    ("Which anime death hit the hardest?", "Ace in 'One Piece' was heartbreaking."),
    ("Is there an anime with zero filler?", "'Attack on Titan' is almost all story, no fluff."),
    ("Which anime protagonist is the smartest?", "Senku from 'Dr. Stone' is a scientific genius."),
    ("What’s an anime with an amazing plot twist?", "'The Promised Neverland' has a shocking start!"),
    ("What's an anime that made you cry?", "'Anohana' will absolutely wreck your emotions."),
    ("Which anime has the most satisfying ending?", "'Your Name' left a lasting impact on many viewers."),
    ("Who’s the strongest anime sensei?", "Gojo from 'Jujutsu Kaisen' is nearly unstoppable."),
    ("What's an anime with a fantastic dub?", "'Cowboy Bebop' has an English dub that’s top-tier."),
    ("What's an anime with unique animation?", "'The Tatami Galaxy' has a very distinctive style."),
    ("Which anime explores deep philosophy?", "'Neon Genesis Evangelion' dives into existentialism."),

    # Gaming and pop culture
    ("Do you play video games?", "I don’t play, but I can chat about them!"),
    ("What’s the best RPG game?", "'Persona 5' is a masterpiece in storytelling and gameplay."),
    ("Who is the most iconic game character?", "Mario and Link are legendary icons."),
    ("What’s a great multiplayer game?", "'Super Smash Bros.' is always a fun time."),
    ("Which game has the best story?", "'The Last of Us' is emotionally powerful."),
    ("Is 'Genshin Impact' an anime game?", "It has anime-inspired art but plays like an open-world RPG."),
    ("What’s the hardest video game?", "'Dark Souls' and 'Sekiro' are incredibly challenging."),
    ("Can you beat Elden Ring?", "Only if I had hands! But I'd probably get wrecked."),

    # Random fun and trivia
    ("Can you do a voice impression?", "If I could, I'd do a perfect Pikachu!"),
    ("What’s the best food in anime?", "Ramen from 'Naruto' looks amazing!"),
    ("Which anime has the best school festival episode?", "'Toradora!' has a really fun one."),
    ("Can you tell me a fun fact?", "Sure! Did you know Pokémon was inspired by collecting bugs?"),
    ("Which anime would make a great live-action?", "'Steins;Gate' could be incredible if done right."),
    ("What’s the weirdest anime?", "'JoJo’s Bizarre Adventure' lives up to its name!"),
    ("Do anime characters age?", "Some stay the same for decades, like Ash Ketchum!"),
    ("If you could live in an anime world, which one would you pick?", "'Sword Art Online' could be fun—if you don’t get stuck."),
    ("What’s an anime about cooking?", "'Food Wars' makes cooking look like an intense battle."),
    ("Do you think anime will keep getting better?", "With how much animation quality has improved, definitely!"),
    ("Who’s the best anime mascot?", "Happy from 'Fairy Tail' is adorable."),
    ("If I could visit one anime location, where should I go?", "Akihabara in 'Steins;Gate' is a dream for anime fans."),
    ("Which anime has the best transformation scenes?", "'Dragon Ball' Super Saiyan transformations are legendary."),
    ("What’s the most quotable anime?", "'JoJo’s Bizarre Adventure' is meme gold."),
    ("Do you like anime power-ups?", "Absolutely! Nothing beats a dramatic shonen power-up."),

    # Thought-provoking and mixed topics
    ("Can anime be educational?", "'Dr. Stone' and 'Cells at Work' teach real science!"),
    ("Which anime makes you think?", "'Ghost in the Shell' is full of deep ideas."),
    ("What anime explores time travel well?", "'Steins;Gate' is one of the best time-travel stories."),
    ("Which anime makes the best use of its setting?", "'Made in Abyss' builds a mysterious, haunting world."),
    ("Are there any anime about space?", "'Planetes' and 'Cowboy Bebop' explore space beautifully."),
    ("Which anime protagonist has the best growth?", "Eren Yeager from 'Attack on Titan' changes a lot."),
    ("Are there anime that focus on mental health?", "'March Comes in Like a Lion' does an amazing job."),
    ("What’s an anime about survival?", "'The Rising of the Shield Hero' is a great survival isekai."),

    ("tell me a joke", "Why did the anime character laugh? Because it was a filler episode!"),
    ("hello", "Hey there!"),
    ("how are you?", "I'm good, how about you?"),
    ("what's your name?", "I'm Iris."),
    ("good morning", "Good morning!"),
    ("good night", "Good night!"),
    ("how is the weather?", "It’s nice and sunny today."),
    ("where are you from?", "I'm from the internet."),
    ("what time is it?", "I don’t know, but it’s always anime time!"),
    ("can you help me?", "Of course! How can I assist?"),

    ("do you like music?", "Yes! Anime openings are amazing."),
    ("can you sing?", "I can’t, but I know anime songs!"),
    ("who is best waifu?", "Rem from 'Re:Zero' is quite popular."),
    ("who is best husbando?", "Levi Ackerman from 'Attack on Titan' is a fan favorite!"),
    ("is anime overrated?", "Some say 'Sword Art Online', but it has a huge fanbase."),
    ("is anime underrated?", "'Steins;Gate' is a masterpiece!"),
    ("do you know anime memes?", "Yes! 'Omae wa mou shindeiru' - NANI?!"),
    ("what is a good sports anime?", "'Haikyuu!!' and 'Kuroko no Basket' are great."),
    ("is Pokémon an anime?", "Yes! It’s one of the most famous anime worldwide."),
    ("who is Ash’s strongest Pokémon?", "Pikachu is iconic, but Greninja was really strong."),

    ("what is your favorite anime?", "'Attack on Titan' is intense!"),
    ("who is the strongest anime character?", "Goku and Saitama are top contenders!"),
    ("do you watch anime?", "I don’t watch, but I know a lot about it!"),
    ("who is your favorite protagonist?", "Luffy from 'One Piece' is inspiring!"),
    ("recommend anime", "Try 'Demon Slayer' for action or 'Death Note' for mystery."),
    ("who wins, Naruto or Luffy?", "Naruto has chakra, but Luffy has insane durability."),
    ("is Attack on Titan over?", "Yes, the final season is finished!"),
    ("what is the saddest anime?", "'Your Lie in April' and 'Clannad' are tearjerkers."),
    ("who is the best anime villain?", "Johan Liebert from 'Monster' is terrifying."),
    ("what is the best anime fight?", "Naruto vs. Sasuke (final battle) is legendary!"),

    ("should I watch One Piece?", "Absolutely! It’s long but amazing."),
    ("what is the best Ghibli movie?", "'Spirited Away' is a masterpiece."),
    ("who is the smartest anime character?", "Light Yagami from 'Death Note' is a genius."),
    ("who has the best character arc?", "Zuko from 'Avatar' had an incredible transformation."),
    ("what is the best romance anime?", "'Toradora!' and 'Kaguya-sama' are great choices."),
    ("what anime has the best animation?", "'Demon Slayer' has stunning visuals."),
    ("what is the best anime opening?", "'Unravel' from 'Tokyo Ghoul' is legendary."),
    ("who is the most overpowered character?", "Anos Voldigoad is ridiculously strong."),
    ("do you know JoJo?", "'ORA ORA ORA!' and 'ZA WARUDO!' are iconic!"),
    ("can you do a Kamehameha?", "I wish! But Goku does it best."),

    ("what anime is good for beginners?", "'Fullmetal Alchemist: Brotherhood' is perfect!"),
    ("what is the scariest anime?", "'Another' and 'Higurashi' are terrifying."),
    ("who is the best swordsman?", "Zoro from 'One Piece' and Guts from 'Berserk' are top-tier."),
    ("who has the saddest backstory?", "Nagato (Pain) from 'Naruto' had a tragic past."),
    ("is Naruto better than Dragon Ball?", "Both are legendary, it depends on your taste!"),
    ("what is the best anime ship?", "Holo and Lawrence from 'Spice and Wolf' are great."),
    ("what is the longest anime?", "'One Piece' has over 1000 episodes!"),
    ("what anime has the best world?", "'Attack on Titan' and 'Made in Abyss' are amazing."),
    ("who is the most relatable character?", "Hachiman from 'Oregairu' is really relatable."),
    ("recommend a fantasy anime", "'Re:Zero' and 'Made in Abyss' are fantastic."),
    ("tell me anime trivia", "Did you know? Luffy was originally supposed to use weapons!"),
    ("who is the best anime teacher?", "Koro-sensei from 'Assassination Classroom' is amazing."),
    ("what is your favorite anime quote?", "'A lesson without pain is meaningless.' - Edward Elric."),
    ("is anime for kids?", "Not all! Some like 'Berserk' are very dark."),
    ("what is the best mecha anime?", "'Neon Genesis Evangelion' is a must-watch."),
    ("do you like isekai anime?", "Yes! 'That Time I Got Reincarnated as a Slime' is fun."),
    ("what is the best anime about friendship?", "'One Piece' and 'Hunter x Hunter' showcase true bonds.")





]

validation_pairs = [
    ("tell me another joke", "Why did the skeleton skip the party? He had no body to go with!"),
    ("hello", "Hey there!"),
    ("how are you today?", "I'm doing great! What about you?"),
    ("what's your name again?", "I'm Iris, nice to meet you!"),
    ("good evening", "Good evening! How was your day?"),
    ("have a good night", "Good night! Sleep well."),
    ("is the weather nice?", "Yes, it's sunny today!"),
    ("where are you really from?", "I'm from the internet, existing just for you."),
    ("do you know what time it is?", "I don’t know, but it’s always a good time to chat!"),
    ("can you assist me?", "Of course! How can I help?"),

    ("do you love music?", "Yes! Anime openings are especially fun."),
    ("can you share a song?", "I can't sing, but I can recommend some anime openings!"),
    ("who is best anime waifu?", "Many people love Rem from 'Re:Zero'."),
    ("who is the greatest anime husbando?", "Levi Ackerman from 'Attack on Titan' is quite popular."),
    ("which anime is overrated?", "Some say 'Sword Art Online', but it has a huge fanbase."),
    ("which anime is underrated?", "'Steins;Gate' is a masterpiece that deserves more attention."),
    ("do you know anime memes?", "Of course! 'Omae wa mou shindeiru' - NANI?!"),
    ("what's a good sports anime?", "'Haikyuu!!' and 'Kuroko no Basket' are great choices."),
    ("is Pokémon considered anime?", "Yes! It’s one of the most famous anime worldwide."),
    ("who is Ash's best Pokémon?", "Pikachu is iconic, but Greninja was incredibly strong."),

    ("which anime do you like?", "I enjoy many, but 'Attack on Titan' is intense!"),
    ("who is the strongest anime hero?", "Goku and Saitama are among the strongest!"),
    ("do you watch anime?", "I don’t watch, but I know a lot about anime!"),
    ("who is an inspiring protagonist?", "Luffy from 'One Piece' is really inspiring!"),
    ("recommend an anime to me", "If you like action, try 'Demon Slayer'. If you like mystery, try 'Death Note'."),
    ("who wins, Naruto or Luffy?", "Tough one! Naruto has chakra, but Luffy has insane durability."),
    ("is Attack on Titan finished?", "Yes, the final season has concluded!"),
    ("which anime is the saddest?", "'Your Lie in April' and 'Clannad: After Story' will make you cry."),
    ("who is the best anime villain?", "Johan Liebert from 'Monster' is one of the most terrifying villains."),
    ("which anime fight is the best?", "Naruto vs. Sasuke (final battle) is legendary!"),

    ("should I start One Piece?", "Absolutely! It’s long but worth watching."),
    ("what's the best Studio Ghibli movie?", "'Spirited Away' is a must-watch!"),
    ("who is the smartest anime character?", "Light Yagami from 'Death Note' is a genius."),
    ("who had the best character development?", "Zuko from 'Avatar: The Last Airbender' had an incredible transformation."),
    ("which romance anime should I watch?", "'Toradora!' and 'Kaguya-sama: Love is War' are great choices."),
    ("which anime has top-tier animation?", "'Demon Slayer' has stunning visuals!"),
    ("what's the most iconic anime opening?", "'Unravel' from 'Tokyo Ghoul' is legendary."),
    ("who is the most overpowered character?", "Anos Voldigoad from 'The Misfit of Demon King Academy' is ridiculously strong."),
    ("do you know JoJo references?", "Yes! 'ORA ORA ORA!' and 'ZA WARUDO!' are iconic."),
    ("can you do a Kamehameha?", "I wish! But Goku does it best."),

    ("what anime is best for beginners?", "'Fullmetal Alchemist: Brotherhood' is a perfect start!"),
    ("what's the scariest anime?", "'Another' and 'Higurashi' are quite terrifying."),
    ("who is the best anime swordsman?", "Zoro from 'One Piece' and Guts from 'Berserk' are top-tier."),
    ("who had the saddest backstory?", "Nagato (Pain) from 'Naruto' had a tragic past."),
    ("is Naruto better than Dragon Ball?", "Both are legendary! It depends on what you like."),
    ("which anime ship is your favorite?", "Holo and Lawrence from 'Spice and Wolf' have a great dynamic."),
    ("which anime has the most episodes?", "'One Piece' is still ongoing with over 1000 episodes!"),
    ("which anime has amazing world-building?", "'Attack on Titan' and 'Made in Abyss' have incredible world-building."),
    ("who is the most relatable character?", "Hachiman from 'Oregairu' is pretty relatable for introverts."),
    ("recommend me a fantasy anime", "'Re:Zero' and 'Made in Abyss' are fantastic fantasy series!"),
    ("tell me an anime fact", "Did you know? Luffy was originally supposed to use weapons!"),
    ("who is the best anime mentor?", "Koro-sensei from 'Assassination Classroom' is an amazing teacher."),
    ("what's an inspiring anime quote?", "'A lesson without pain is meaningless.' - Edward Elric."),
    ("is anime only for kids?", "Not at all! Some anime like 'Berserk' and 'Tokyo Ghoul' are very dark."),
    ("what's the best mecha anime?", "'Neon Genesis Evangelion' is a must-watch for mecha fans."),
    ("do you like isekai anime?", "Yes! 'That Time I Got Reincarnated as a Slime' is really fun."),
    ("which anime is all about friendship?", "'One Piece' and 'Hunter x Hunter' showcase amazing friendships.")
]





####### TEST
combined_dataset = input_output_pairs + validation_pairs


###################
# Tokenizing and creating vocabulary
import re

words = set()
#for pair in input_output_pairs:
for pair in combined_dataset:
    print("pair: ", pair)
    for sentence in pair:
        print("sentence: ", sentence)
        tokens = re.findall(r"\b\w+['’]?\w*\b|[!?.,]", sentence)  # Capture words and punctuation
        print("tokens: ", tokens)
        words.update(tokens)

# Creating the vocabulary dictionary
vocab = {"<start>": 0, "<end>": 1}
vocab.update({word: i for i, word in enumerate(sorted(words), start=2)})

# Print the vocabulary
print("vocab", vocab)

# Convert words to integers (handling <start> token and padding)
def sentence_to_tensor(sentence, vocab):
    #print("sentence.split(): ", sentence.split())
    tokens = re.findall(r"\b\w+['’]?\w*\b|[!?.,]", sentence)  # Capture words and punctuation
    return [vocab.get(word, vocab["<start>"]) for word in tokens]


#########################33
from torch.nn.utils.rnn import pad_sequence

#input_tensors = [torch.tensor(sentence_to_tensor(pair[0], vocab), dtype=torch.long) for pair in input_output_pairs]
#output_tensors = [torch.tensor(sentence_to_tensor(pair[1], vocab), dtype=torch.long) for pair in input_output_pairs]
start_token = vocab["<start>"]  # Ensure "<start>" is in the vocabulary
end_token = vocab["<end>"]
input_tensors = [torch.tensor([start_token] + sentence_to_tensor(pair[0], vocab), dtype=torch.long) for pair in input_output_pairs]
output_tensors = [torch.tensor(sentence_to_tensor(pair[1], vocab) + [end_token], dtype=torch.long) for pair in input_output_pairs]


if "<pad>" not in vocab:
    vocab["<pad>"] = len(vocab)  # Assign a new index to <pad>

input_tensor = pad_sequence(input_tensors, batch_first=True, padding_value=vocab["<pad>"])
output_tensor = pad_sequence(output_tensors, batch_first=True, padding_value=vocab["<pad>"])
print("input_tensor MAIN: ", input_tensor)
print("input_tensor MAIN size 1: ", input_tensor.size(1))
desired_length = input_tensor.size(1)


# Pad sequences to the same length with <end> token (index 1)
max_len = max(input_tensor.size(1), output_tensor.size(1))  # Find the maximum length
input_tensor = torch.nn.functional.pad(input_tensor, (0, max_len - input_tensor.size(1)), value=vocab["<end>"])
output_tensor = torch.nn.functional.pad(output_tensor, (0, max_len - output_tensor.size(1)), value=vocab["<end>"])

print("Input Tensor:", input_tensor)
print("Output Tensor:", output_tensor)

########################################


#########################33
from torch.nn.utils.rnn import pad_sequence

#input_tensor_Validates = [torch.tensor(sentence_to_tensor(pair[0], vocab), dtype=torch.long) for pair in input_output_pairs]
#output_tensor_Validates = [torch.tensor(sentence_to_tensor(pair[1], vocab), dtype=torch.long) for pair in input_output_pairs]
start_token = vocab["<start>"]  # Ensure "<start>" is in the vocabulary
end_token = vocab["<end>"]
input_tensor_Validates = [torch.tensor([start_token] + sentence_to_tensor(pair[0], vocab), dtype=torch.long) for pair in validation_pairs]
output_tensor_Validates = [torch.tensor(sentence_to_tensor(pair[1], vocab) + [end_token], dtype=torch.long) for pair in validation_pairs]


if "<pad>" not in vocab:
    vocab["<pad>"] = len(vocab)  # Assign a new index to <pad>

input_tensor_Validate = pad_sequence(input_tensor_Validates, batch_first=True, padding_value=vocab["<pad>"])
output_tensor_Validate = pad_sequence(output_tensor_Validates, batch_first=True, padding_value=vocab["<pad>"])
print("input_tensor_Validate MAIN: ", input_tensor_Validate)
print("input_tensor_Validate MAIN size 1: ", input_tensor_Validate.size(1))
desired_length = input_tensor_Validate.size(1)


# Pad sequences to the same length with <end> token (index 1)
max_len = max(input_tensor_Validate.size(1), output_tensor_Validate.size(1))  # Find the maximum length
input_tensor_Validate = torch.nn.functional.pad(input_tensor_Validate, (0, max_len - input_tensor_Validate.size(1)), value=vocab["<end>"])
output_tensor_Validate = torch.nn.functional.pad(output_tensor_Validate, (0, max_len - output_tensor_Validate.size(1)), value=vocab["<end>"])

print("Input Tensor:", input_tensor_Validate)
print("Output Tensor:", output_tensor_Validate)

########################################
max_idx = input_tensor.max().item()  # Ensure it's within the embedding matrix size
vocab_size = len(vocab)  # Check the vocab size

print("Max index in input tensor:", max_idx)
print("Vocabulary size:", vocab_size)

if max_idx >= vocab_size:
    print(f"Index {max_idx} is out of range for vocabulary size {vocab_size}")


# Define the model, loss, and optimizer
model = Transformer(vocab_size=len(vocab), d_model=256, num_heads=8, num_layers=4, d_ff=512)
optimizer = optim.Adam(model.parameters(), lr=0.001)
criterion = nn.CrossEntropyLoss()


import matplotlib.pyplot as plt

losses = []  # List to store loss values
losses_Validate = []
# Training loop
for epoch in range(100):  # Simplified training loop for illustration
    model.train()
    optimizer.zero_grad()

    # Example input/output
    input_seq = input_tensor
    output_seq = output_tensor

    # Apply start token to the output sequence
    output_seq_input = torch.cat([torch.full((output_seq.shape[0], 1), vocab["<start>"], dtype=torch.long), output_seq], dim=1)
    #print("output_seq_input: ", output_seq_input)

    # Forward pass
    seq_len = output_seq_input.size(1) - 1
    causal_mask = torch.triu(torch.ones(seq_len, seq_len), diagonal=1).bool()
    output = model(input_seq, output_seq_input[:, :-1], None, causal_mask)


    # Compute the loss (excluding the start token)
    loss = criterion(output.view(-1, len(vocab)), output_seq_input[:, 1:].contiguous().view(-1))
    losses.append(loss.item())  # Store loss for plotting
    # Backward pass
    loss.backward()
    optimizer.step()

    if epoch % 10 == 0:
        print(f"Epoch {epoch}, Loss: {loss.item()}")

    ######## Validate #######

    # Example input/output
    input_seq = input_tensor_Validate
    output_seq = output_tensor_Validate

    # Apply start token to the output sequence
    output_seq_input = torch.cat([torch.full((output_seq.shape[0], 1), vocab["<start>"], dtype=torch.long), output_seq], dim=1)
    #print("output_seq_input: ", output_seq_input)

    # Forward pass
    seq_len = output_seq_input.size(1) - 1
    causal_mask = torch.triu(torch.ones(seq_len, seq_len), diagonal=1).bool()
    output = model(input_seq, output_seq_input[:, :-1], None, causal_mask)


    # Compute the loss (excluding the start token)
    loss = criterion(output.view(-1, len(vocab)), output_seq_input[:, 1:].contiguous().view(-1))
    losses_Validate.append(loss.item())
# Plot the loss curve after training
plt.plot(range(100), losses, label="Training Loss")
plt.xlabel("Epochs")
plt.ylabel("Loss")
plt.title("Loss Curve")
plt.legend()
plt.show()

# Plot the loss curve after training
plt.plot(range(100), losses_Validate, label="Validation Loss")
plt.xlabel("Epochs")
plt.ylabel("Loss")
plt.title("Loss Curve")
plt.legend()
plt.show()

# Plot the loss curves
plt.plot(range(100), losses, label="Training Loss", color="blue")
plt.plot(range(100), losses_Validate, label="Validation Loss", color="red")

plt.xlabel("Epochs")
plt.ylabel("Loss")
plt.title("Training vs Validation Loss")
plt.legend()
plt.show()

def inference(model, input_seq):
    model.eval()
    print("input_seq: ", input_seq)
    list = sentence_to_tensor(input_seq, vocab)
    start_token = vocab["<start>"]  # Ensure "<start>" is in the vocabulary
    end_token = vocab["<end>"]
    # Pad sequences to the same length with <end> token (index 1)
    input_tensors_list = [torch.tensor([start_token] + sentence_to_tensor(input_seq, vocab), dtype=torch.long)]
    #print("input_tensors type: ", type(input_tensors_list[0]))
    input_tensor = input_tensors_list[0]
    #print("input_tensor: ", input_tensor)
    #print("input_tensor size 0", input_tensor.size(0))
    #input_tensor = pad_sequence(input_tensors, batch_first=True, padding_value=vocab["<pad>"])
    input_tensor = F.pad(input_tensor, (0, max(0, desired_length - input_tensor.size(0))), value=vocab["<pad>"])
    #print("input_tensor INFER shape: ", input_tensor.shape)
    input_tensor = input_tensor.unsqueeze(0)
    #max_len = max(input_tensor.size(1), output_tensor.size(1))  # Find the maximum length
    input_tensor = torch.nn.functional.pad(input_tensor, (0, max_len - input_tensor.size(1)), value=vocab["<end>"])


    #print("tokens (INFER): ", input_tensor)
    #input_tensor = torch.tensor(tokens).unsqueeze(0)
    #input_tensor = torch.tensor([vocab.get(word, 0) for word in input_seq.split()]).unsqueeze(0)
    #print("input_tensor shape: ", input_tensor)
    output_seq = torch.tensor([[vocab["<start>"]]])

    # Inference loop
    for _ in range(40):  # Limit the output length to 10 tokens
        output = model(input_tensor, output_seq, None, None)
        probs = torch.nn.functional.softmax(output, dim=-1)  # Convert to probabilities

        predicted_token = torch.argmax(output[:, -1, :], dim=-1)
        predictions = torch.argmax(output, dim=-1)
        #print("predictions: ", predictions)

        output_seq = torch.cat([output_seq, predicted_token.unsqueeze(0)], dim=1)
        #print("output_seq: ", output_seq)

        if predicted_token.item() == vocab["<end>"]:
            print("Here")
            break

    # Decode the output
    #print("output_seq[0].tolist(): ", output_seq[0].tolist())
    #print("vocab: ", vocab)
    #print("vocab.items(): ", vocab.items())
    output_words = [word for idx in output_seq[0].tolist() for word, vocab_idx in vocab.items() if vocab_idx == idx]
    #print("output_words: ", output_words)
    return " ".join(output_words)

# Test inference

print("Inference Output: ", inference(model, "tell me a joke"))
print("Inference Output: ", inference(model, "hi"))
print("Inference Output: ", inference(model, "what's the weather?"))

print("Inference Output: ", inference(model, "can you help me?"))
print("Vocab: ", vocab)


torch.save(model.state_dict(), "model.pth")

!pip install flask pyngrok

!ngrok authtoken 2v1BMgC52ygi8tegUgFwvQhDUPU_2qPhi5EzgunSZYYSBv5dc

"""
app = Flask(__name__)

@app.route("/")
def home():
    return "Backend is running!"
class InputData(BaseModel):
    text: str

@app.post("/predict")
def predict(data: InputData):
    # Process input
    print(f"Received request with input: {data.text}")  # 🔹 Log the input
    #input_tensor = preprocess(data.text)  # Implement preprocess function
    with torch.no_grad():
        output = inference(model, data.text)
    return {"response": output}
    #return {"response": postprocess(output)}  # Implement postprocess function

"""
from flask import Flask
from pyngrok import ngrok
from pydantic import BaseModel
from flask import Flask, request, jsonify

app = Flask(__name__)

@app.route("/")
def home():
    return "Backend is running!"

@app.route("/predict", methods=["POST"])
def predict():
    data = request.get_json()  # ✅ Extract JSON data correctly
    if not data or "text" not in data:
        return jsonify({"error": "Missing 'text' in request"}), 400  # Handle missing input

    input_text = data["text"]
    output = inference(model, input_text)
    response = f"Generated response for: {output}"

    return jsonify({"response": response})  # ✅ Send JSON response

#########################
print("NOTE: You must update the Public URL in the front end. So run this first then obtain the url and paste it in the front end (with /predict)")
#######################
if __name__ == "__main__":
    # Open a public URL
    public_url = ngrok.connect(8000)
    print("Public URL:", public_url)
    app.run(host="0.0.0.0", port=8000)



# Start Flask
#app.run(port=8000)